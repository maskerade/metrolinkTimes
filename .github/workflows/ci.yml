name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Lint with ruff
      run: uv run ruff check metrolinkTimes/
    
    - name: Check formatting with ruff
      run: uv run ruff format --check metrolinkTimes/
    
    - name: Test with pytest
      run: uv run pytest
    
    - name: Test import
      run: uv run python -c "from metrolinkTimes.api import app; print('Import successful')"

  docker:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/metrolink-times
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Test Docker image
      run: |
        # Pull and test the published image using the short SHA tag
        IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/metrolink-times:${{ github.ref_name }}-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "Testing image: $IMAGE_TAG"
        docker pull "$IMAGE_TAG"
        docker run -d --name test-container -p 5000:5000 "$IMAGE_TAG"
        sleep 10
        docker logs test-container
        docker stop test-container